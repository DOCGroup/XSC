divert(-1)

# file      : XSC/SemanticGraph/Fundamental.cpp.m4
# author    : Boris Kolpackov <boris@dre.vanderbilt.edu>
# cvs-id    : $Id$

include(`Fundamental.m4')

define(`fundamental_type',
  `fundamental_type_impl(`make_class_name(`$1')', `make_var_name(`$1')')')


define(`fundamental_type_impl', `

    // $1
    //
    //
    namespace
    {
      TypeInfo
      $2_init_ ()
      {
        TypeInfo ti (typeid ($1));
        ti.add_base (
          Access::PUBLIC, true, FundamentalType::static_type_info ());
        return ti;
      }

      TypeInfo $2_ ($2_init_ ());
    }

    TypeInfo const& $1::
    static_type_info () { return $2_; }')

divert(0)dnl
dnl
dnl
dnl
// file      : XSC/SemanticGraph/Fundamental.cpp
// author    : Boris Kolpackov <boris@dre.vanderbilt.edu>
// cvs-id    : $Id$

// Note, that this file is automatically generated!
//

#include <XSC/SemanticGraph/Fundamental.hpp>

namespace XSC
{
  namespace SemanticGraph
  {
    using Introspection::TypeInfo;
    using Introspection::Access;

    // FundamentalType
    //
    //
    namespace
    {
      TypeInfo
      fundamental_type_init_ ()
      {
        TypeInfo ti (typeid (FundamentalType));
        ti.add_base (Access::PUBLIC, true, Type::static_type_info ());
        return ti;
      }

      TypeInfo fundamental_type_ (fundamental_type_init_ ());
    }

    TypeInfo const& FundamentalType::
    static_type_info () { return fundamental_type_; }
dnl
fundamental_type(`any type')
fundamental_type(`any simple type')
fundamental_type(`byte')
fundamental_type(`unsigned byte')
fundamental_type(`short')
fundamental_type(`unsigned short')
fundamental_type(`int')
fundamental_type(`unsigned int')
fundamental_type(`long')
fundamental_type(`unsigned long')
fundamental_type(`decimal')
fundamental_type(`integer')
fundamental_type(`non positive integer')
fundamental_type(`non negative integer')
fundamental_type(`positive integer')
fundamental_type(`negative integer')
fundamental_type(`boolean')
fundamental_type(`float')
fundamental_type(`double')
fundamental_type(`string')
fundamental_type(`normalized string')
fundamental_type(`token')
fundamental_type(`name')
fundamental_type(`NM TOKEN')
fundamental_type(`NC name')
fundamental_type(`id')
fundamental_type(`id ref')
fundamental_type(`href')
dnl
  }
}
